C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/ConfigurationPanel/ConfigurationPanel.css:
/* src/components/ConfigurationPanel/ConfigurationPanel.css */

.config-section {
  text-align: left;
  max-width: 1200px; /* Increased max-width for wider screens */
  margin: 20px auto;
  padding: 25px;
  border: 1px solid var(--border-color);
  border-radius: 10px;
  background-color: var(--primary-color);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.config-section h2 {
  margin-top: 0;
  color: var(--accent-color);
}

.config-section p {
  color: var(--secondary-text-color);
  line-height: 1.6;
}

.node-selection {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  margin-bottom: 20px;
}

.node-selector {
  display: flex;
  align-items: center;
}

.node-selector input {
  margin-right: 10px;
  width: 16px;
  height: 16px;
}

.node-selector label {
  cursor: pointer;
  color: var(--text-color);
}

/* Submit Button */
.config-section button {
  background-color: var(--button-background);
  color: var(--text-color);
  border: none;
  padding: 12px 20px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s, transform 0.2s;
}

.config-section button:hover {
  background-color: var(--button-hover);
  transform: translateY(-2px);
}

.config-section button:disabled {
  background-color: #555555;
  cursor: not-allowed;
}



C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/ConfigurationPanel/ConfigurationPanel.js:
// src/components/ConfigurationPanel/ConfigurationPanel.js
import React from 'react';
import './ConfigurationPanel.css'; // Updated path

const ConfigurationPanel = ({ columns, onSelectNode, onSubmit, loading, selectedNodes }) => {
  return (
    <div className="config-section">
      <h2>Configuration</h2>
      <p>
        Select the columns you want to include as nodes in the graph. Only selected columns will require a node type and features.
      </p>

      <div className="node-selection">
        {columns.map((column) => (
          <div key={column} className="node-selector">
            <input
              type="checkbox"
              id={`node-select-${column}`}
              checked={selectedNodes.includes(column)}
              onChange={() => onSelectNode(column)}
            />
            <label htmlFor={`node-select-${column}`}>{column}</label>
          </div>
        ))}
      </div>

      <button onClick={onSubmit} disabled={loading}>
        {loading ? 'Processing...' : 'Submit Configuration'}
      </button>
    </div>
  );
};

export default ConfigurationPanel;

/*
Detailed Explanation:

1. **Props Received:**
   - `columns`: An array of column names from the uploaded CSV.
   - `onSelectNode`: Function to handle the selection/deselection of a column as a node.
   - `onSubmit`: Function to handle the submission of the configuration.
   - `loading`: Boolean indicating whether a submission is in progress.
   - `selectedNodes`: Array of currently selected node columns.

2. **UI Elements:**
   - **Checkboxes for Node Selection:**
     - Each column is presented with a checkbox. Checking it includes the column as a node; unchecking it excludes it.
   
   - **Submit Button:**
     - Allows users to submit the selected configuration. Disabled when `loading` is `true`.

3. **Styling:**
   - Ensure that `ConfigurationPanel.css` styles the node selection UI appropriately.

*/




C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/FeatureSpaceCreatorTab/FeatureSpaceCreatorTab.css:
/* src/components/FeatureSpaceCreatorTab/FeatureSpaceCreatorTab.css */

.feature-space-creator-tab {
    padding: 20px;
    background-color: var(--primary-color);
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .feature-space-creator-tab h2 {
    color: var(--accent-color);
    margin-bottom: 20px;
    font-size: 2rem;
  }
  
  .feature-space-creator-tab form {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .feature-config {
    background-color: var(--secondary-color);
    border: 1px solid var(--border-color);
    padding: 20px;
    margin-bottom: 20px;
    border-radius: 8px;
    width: 100%;
    max-width: 800px;
    position: relative;
    transition: background-color 0.3s, border-color 0.3s;
  }
  
  .feature-config h3 {
    margin-top: 0;
    color: var(--accent-color);
    font-size: 1.5rem;
  }
  
  .remove-feature-button {
    position: absolute;
    top: 20px;
    right: 20px;
    background-color: #ff4d4f;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  
  .remove-feature-button:hover {
    background-color: #ff7875;
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
    margin-bottom: 15px;
    width: 100%;
  }
  
  .form-group label {
    margin-bottom: 5px;
    color: var(--text-color);
    font-weight: 500;
  }
  
  .form-group input,
  .form-group select {
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background-color: var(--input-background);
    color: var(--input-text-color);
    font-size: 1rem;
    transition: border-color 0.3s, background-color 0.3s;
  }
  
  .form-group input:focus,
  .form-group select:focus {
    border-color: var(--accent-color);
    outline: none;
  }
  
  .add-feature-button {
    background-color: var(--button-background);
    color: var(--button-text-color);
    border: none;
    padding: 12px 24px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s;
    margin-bottom: 20px;
  }
  
  .add-feature-button:hover {
    background-color: var(--button-hover);
  }
  
  .submit-button {
    background-color: var(--accent-color);
    color: var(--button-text-color);
    border: none;
    padding: 14px 28px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1.1rem;
    transition: background-color 0.3s;
    margin-bottom: 20px;
  }
  
  .submit-button:hover {
    background-color: #985eff;
  }
  
  .submit-button:disabled {
    background-color: var(--border-color);
    cursor: not-allowed;
  }
  
  /* Feature Space Summary */
  .feature-space-summary {
    background-color: var(--secondary-color);
    border: 1px solid var(--border-color);
    padding: 20px;
    margin-top: 30px;
    border-radius: 8px;
    text-align: left;
    max-width: 1000px;
    margin-left: auto;
    margin-right: auto;
    transition: background-color 0.3s, border-color 0.3s;
  }
  
  .feature-space-summary h3 {
    color: var(--accent-color);
    margin-bottom: 20px;
    font-size: 1.8rem;
  }
  
  /* Metrics Section */
  .metrics {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 30px;
  }
  
  .metric {
    background-color: var(--primary-color);
    padding: 15px 20px;
    border-radius: 6px;
    border: 1px solid var(--border-color);
    flex: 1 1 200px;
  }
  
  .metric-label {
    display: block;
    font-weight: 600;
    color: var(--text-color);
    margin-bottom: 5px;
  }
  
  .metric-value {
    display: block;
    font-size: 1.2rem;
    color: var(--text-color);
  }
  
  /* Feature Summary Table */
  .feature-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
  }
  
  .feature-table th,
  .feature-table td {
    border: 1px solid var(--border-color);
    padding: 12px 15px;
    text-align: left;
  }
  
  .feature-table th {
    background-color: var(--background-color);
    color: var(--text-color);
    font-weight: 600;
  }
  
  .feature-table tbody tr:nth-child(even) {
    background-color: var(--input-background);
  }
  
  .feature-table tbody tr:hover {
    background-color: var(--border-color);
  }
  
  /* Badges */
  .badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 12px;
    color: white;
    font-size: 0.9rem;
  }
  
  /* Download Section */
  .download-section {
    text-align: center;
    margin-top: 10px;
  }
  
  .download-link {
    display: inline-block;
    margin-top: 15px;
    color: var(--link-color);
    text-decoration: underline;
    cursor: pointer;
    transition: color 0.3s;
  }
  
  .download-link:hover {
    color: var(--button-hover);
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .metrics {
      flex-direction: column;
    }
  
    .feature-table th,
    .feature-table td {
      padding: 8px 10px;
    }
  
    .feature-space-summary h3 {
      font-size: 1.5rem;
    }
  }
  
  /* New CSS for Embedding Shape Column (Optional) */
  
  /* Ensure that the new Embedding Shape column has adequate width */
  .feature-table th:nth-child(5),
  .feature-table td:nth-child(5) {
    width: 150px; /* Adjust as needed */
  }



C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/FeatureSpaceCreatorTab/FeatureSpaceCreatorTab.js:
// src/components/FeatureSpaceCreatorTab/FeatureSpaceCreatorTab.js

import React, { useState } from 'react';
import './FeatureSpaceCreatorTab.css';

function FeatureSpaceCreatorTab({ csvData, columns, onSubmit, loading, featureSpaceData }) {
  const [features, setFeatures] = useState([
    {
      column_name: '',
      type: 'text', // 'text' or 'numeric'
      // Text feature options
      embedding_method: 'bert', // 'bert', 'glove', 'word2vec'
      embedding_dim: 768,
      dim_reduction_method: 'none', // 'none', 'pca', 'umap'
      dim_reduction_target_dim: 100,
      // Numeric feature options
      data_type: 'float', // 'int' or 'float'
      processing: 'none', // 'none', 'standardize', 'normalize'
      projection_method: 'none', // 'none', 'linear'
      projection_target_dim: 1,
    },
  ]);

  const handleFeatureChange = (index, field, value) => {
    const updatedFeatures = [...features];
    updatedFeatures[index][field] = value;
    setFeatures(updatedFeatures);
  };

  const handleAddFeature = () => {
    setFeatures([
      ...features,
      {
        column_name: '',
        type: 'text',
        embedding_method: 'bert',
        embedding_dim: 768,
        dim_reduction_method: 'none',
        dim_reduction_target_dim: 100,
        data_type: 'float',
        processing: 'none',
        projection_method: 'none',
        projection_target_dim: 1,
      },
    ]);
  };

  const handleRemoveFeature = (index) => {
    const updatedFeatures = [...features];
    updatedFeatures.splice(index, 1);
    setFeatures(updatedFeatures);
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // Validation: Ensure all required fields are filled
    for (let i = 0; i < features.length; i++) {
      const feature = features[i];
      if (!feature.column_name) {
        alert(`Feature ${i + 1}: Please select a column.`);
        return;
      }

      if (feature.type === 'text') {
        if (!feature.embedding_method) {
          alert(`Feature ${i + 1}: Please select an embedding method.`);
          return;
        }
        if (feature.dim_reduction_method !== 'none' && !feature.dim_reduction_target_dim) {
          alert(`Feature ${i + 1}: Please specify a target dimension for dimensionality reduction.`);
          return;
        }
      }

      if (feature.type === 'numeric') {
        if (!feature.data_type) {
          alert(`Feature ${i + 1}: Please select a data type.`);
          return;
        }
        if (feature.processing !== 'none' && !feature.processing) {
          alert(`Feature ${i + 1}: Please select a processing method.`);
          return;
        }
        if (feature.projection_method !== 'none' && !feature.projection_target_dim) {
          alert(`Feature ${i + 1}: Please specify a target dimension for projection.`);
          return;
        }
      }
    }

    // Prepare configuration object
    const config = {
      features: features.map((feature) => {
        const { column_name, type } = feature;
        const featureConfig = {
          column_name,
          type,
        };
        if (type === 'text') {
          featureConfig.embedding_method = feature.embedding_method;
          featureConfig.embedding_dim = parseInt(feature.embedding_dim, 10);
          if (feature.dim_reduction_method !== 'none') {
            featureConfig.dim_reduction = {
              method: feature.dim_reduction_method,
              target_dim: parseInt(feature.dim_reduction_target_dim, 10),
            };
          }
        }
        if (type === 'numeric') {
          featureConfig.data_type = feature.data_type;
          featureConfig.processing = feature.processing;
          if (feature.projection_method !== 'none') {
            featureConfig.projection = {
              method: feature.projection_method,
              target_dim: parseInt(feature.projection_target_dim, 10),
            };
          }
        }
        return featureConfig;
      }),
      multi_graph_settings: {
        embedding_shapes: features.reduce((acc, feature) => {
          if (feature.type === 'text') {
            acc[feature.column_name] = feature.dim_reduction_method !== 'none'
              ? parseInt(feature.dim_reduction_target_dim, 10)
              : parseInt(feature.embedding_dim, 10);
          }
          if (feature.type === 'numeric') {
            acc[feature.column_name] = feature.projection_method !== 'none'
              ? parseInt(feature.projection_target_dim, 10)
              : 1;
          }
          return acc;
        }, {})
      }
    };

    // Submit the configuration and data to the backend
    onSubmit(config);
  };

  // Helper function to calculate total embedding dimensions
  const calculateTotalDimensions = () => {
    if (!featureSpaceData || !featureSpaceData.multi_graph_settings || !featureSpaceData.multi_graph_settings.embedding_shapes) return 0;
    const shapes = featureSpaceData.multi_graph_settings.embedding_shapes;
    return Object.values(shapes).reduce((acc, dim) => acc + dim, 0);
  };

  // Helper function to count feature types
  const countFeatureTypes = () => {
    if (!featureSpaceData || !featureSpaceData.features) return { text: 0, numeric: 0 };
    const features = featureSpaceData.features;
    let text = 0;
    let numeric = 0;
    features.forEach((feature) => {
      if (feature.type === 'text') text += 1;
      if (feature.type === 'numeric') numeric += 1;
    });
    return { text, numeric };
  };

  // Define color schemes for different types and methods
  const typeColors = {
    text: '#1890ff',
    numeric: '#52c41a',
  };

  const methodColors = {
    bert: '#faad14',
    glove: '#eb2f96',
    word2vec: '#13c2c2',
  };

  return (
    <div className="feature-space-creator-tab">
      <h2>Feature Space Creator</h2>
      <form onSubmit={handleSubmit}>
        {features.map((feature, index) => (
          <div key={index} className="feature-config">
            <h3>Feature {index + 1}</h3>
            {features.length > 1 && (
              <button 
                type="button" 
                onClick={() => handleRemoveFeature(index)} 
                className="remove-feature-button"
              >
                Remove Feature
              </button>
            )}
            <div className="form-group">
              <label>Column Name:</label>
              <select
                value={feature.column_name}
                onChange={(e) => handleFeatureChange(index, 'column_name', e.target.value)}
                required
              >
                <option value="">Select Column</option>
                {columns.map((col, idx) => (
                  <option key={idx} value={col}>{col}</option>
                ))}
              </select>
            </div>

            <div className="form-group">
              <label>Type:</label>
              <select
                value={feature.type}
                onChange={(e) => handleFeatureChange(index, 'type', e.target.value)}
                required
              >
                <option value="text">Text</option>
                <option value="numeric">Numeric</option>
              </select>
            </div>

            {feature.type === 'text' && (
              <>
                <div className="form-group">
                  <label>Embedding Method:</label>
                  <select
                    value={feature.embedding_method}
                    onChange={(e) => handleFeatureChange(index, 'embedding_method', e.target.value)}
                    required
                  >
                    <option value="bert">BERT</option>
                    <option value="glove">GloVe</option>
                    <option value="word2vec">Word2Vec</option>
                  </select>
                </div>

                <div className="form-group">
                  <label>Embedding Dimension:</label>
                  <input
                    type="number"
                    value={feature.embedding_dim}
                    onChange={(e) => handleFeatureChange(index, 'embedding_dim', e.target.value)}
                    min="1"
                    required
                  />
                </div>

                <div className="form-group">
                  <label>Dimensionality Reduction:</label>
                  <select
                    value={feature.dim_reduction_method}
                    onChange={(e) => handleFeatureChange(index, 'dim_reduction_method', e.target.value)}
                  >
                    <option value="none">None</option>
                    <option value="pca">PCA</option>
                    <option value="umap">UMAP</option>
                  </select>
                </div>

                {feature.dim_reduction_method !== 'none' && (
                  <div className="form-group">
                    <label>Target Dimension:</label>
                    <input
                      type="number"
                      value={feature.dim_reduction_target_dim}
                      onChange={(e) => handleFeatureChange(index, 'dim_reduction_target_dim', e.target.value)}
                      min="1"
                      required
                    />
                  </div>
                )}
              </>
            )}

            {feature.type === 'numeric' && (
              <>
                <div className="form-group">
                  <label>Data Type:</label>
                  <select
                    value={feature.data_type}
                    onChange={(e) => handleFeatureChange(index, 'data_type', e.target.value)}
                    required
                  >
                    <option value="float">Float</option>
                    <option value="int">Integer</option>
                  </select>
                </div>

                <div className="form-group">
                  <label>Processing:</label>
                  <select
                    value={feature.processing}
                    onChange={(e) => handleFeatureChange(index, 'processing', e.target.value)}
                  >
                    <option value="none">None</option>
                    <option value="standardize">Standardize</option>
                    <option value="normalize">Normalize</option>
                  </select>
                </div>

                <div className="form-group">
                  <label>Projection:</label>
                  <select
                    value={feature.projection_method}
                    onChange={(e) => handleFeatureChange(index, 'projection_method', e.target.value)}
                  >
                    <option value="none">None</option>
                    <option value="linear">Linear</option>
                  </select>
                </div>

                {feature.projection_method !== 'none' && (
                  <div className="form-group">
                    <label>Target Dimension:</label>
                    <input
                      type="number"
                      value={feature.projection_target_dim}
                      onChange={(e) => handleFeatureChange(index, 'projection_target_dim', e.target.value)}
                      min="1"
                      required
                    />
                  </div>
                )}
              </>
            )}
          </div>
        ))}

        <button type="button" onClick={handleAddFeature} className="add-feature-button">
          Add Feature
        </button>

        <button type="submit" className="submit-button" disabled={loading}>
          {loading ? 'Processing...' : 'Create Feature Space'}
        </button>
      </form>

      {/* Display Feature Space Statistics and Summary */}
      {featureSpaceData && (
        <div className="feature-space-summary">
          <h3>Feature Space Summary</h3>

          {/* Metrics Section */}
          <div className="metrics">
            <div className="metric">
              <span className="metric-label">Total Features:</span>
              <span className="metric-value">{featureSpaceData.features.length}</span>
            </div>
            <div className="metric">
              <span className="metric-label">Total Embedding Dimensions:</span>
              <span className="metric-value">{calculateTotalDimensions()}</span>
            </div>
            <div className="metric">
              <span className="metric-label">Text Features:</span>
              <span className="metric-value">{countFeatureTypes().text}</span>
            </div>
            <div className="metric">
              <span className="metric-label">Numeric Features:</span>
              <span className="metric-value">{countFeatureTypes().numeric}</span>
            </div>
          </div>

          {/* Feature Summary Table */}
          <table className="feature-table">
            <thead>
              <tr>
                <th>Column Name</th>
                <th>Type</th>
                <th>Embedding Method</th>
                <th>Embedding Dimension</th>
                <th>Embedding Shape</th> {/* New Column */}
                <th>Dimensionality Reduction</th>
                <th>Processing</th>
              </tr>
            </thead>
            <tbody>
              {featureSpaceData.features && featureSpaceData.features.length > 0 ? (
                featureSpaceData.features.map((feature, idx) => {
                  // Retrieve the embedding shape from multi_graph_settings
                  const embeddingShape = featureSpaceData.multi_graph_settings.embedding_shapes
                    ? featureSpaceData.multi_graph_settings.embedding_shapes[feature.column_name]
                    : 'N/A';

                  return (
                    <tr key={idx}>
                      <td>{feature.column_name}</td>
                      <td>
                        <span 
                          className="badge" 
                          style={{ backgroundColor: typeColors[feature.type] || '#ccc' }}
                        >
                          {feature.type.charAt(0).toUpperCase() + feature.type.slice(1)}
                        </span>
                      </td>
                      <td>
                        {feature.type === 'text' ? (
                          <span 
                            className="badge" 
                            style={{ backgroundColor: methodColors[feature.embedding_method] || '#ccc' }}
                          >
                            {feature.embedding_method.charAt(0).toUpperCase() + feature.embedding_method.slice(1)}
                          </span>
                        ) : (
                          'N/A'
                        )}
                      </td>
                      <td>
                        {feature.type === 'text' 
                          ? feature.embedding_dim 
                          : feature.data_type === 'float' 
                            ? 'Float' 
                            : 'Int'}
                      </td>
                      <td>
                        {embeddingShape !== 'N/A' 
                          ? `(${embeddingShape})` 
                          : 'N/A'}
                      </td>
                      <td>
                        {feature.type === 'text' && feature.dim_reduction ? (
                          `${feature.dim_reduction.method.toUpperCase()} (${feature.dim_reduction.target_dim})`
                        ) : (
                          'N/A'
                        )}
                      </td>
                      <td>
                        {feature.type === 'numeric' ? (
                          feature.processing.charAt(0).toUpperCase() + feature.processing.slice(1)
                        ) : (
                          'N/A'
                        )}
                      </td>
                    </tr>
                  );
                })
              ) : (
                <tr>
                  <td colSpan="7" style={{ textAlign: 'center', padding: '20px' }}>
                    No features available.
                  </td>
                </tr>
              )}
            </tbody>
          </table>

          {/* Download Option */}
          <div className="download-section">
            <a 
              href={`data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(featureSpaceData))}`} 
              download="feature_space.json"
              className="download-link"
            >
              Download Feature Space JSON
            </a>
          </div>
        </div>
      )}
    </div>
  );
}

export default FeatureSpaceCreatorTab;



C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/FileUploader/FileUploader.css:
/* src/components/FileUploader/FileUploader.css */

.file-uploader {
  max-width: 600px;
  margin: 20px auto;
}

.dropzone {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 150px;
  border: 2px dashed var(--border-color);
  border-radius: 10px;
  background-color: var(--dropzone-background);
  color: var(--text-color);
  cursor: pointer;
  transition: background-color 0.3s, border-color 0.3s;
}

.dropzone.active {
  background-color: var(--dropzone-active-background);
  border-color: var(--accent-color);
}

.dropzone p {
  font-size: 16px;
  text-align: center;
}


C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/FileUploader/FileUploader.js:
// src/components/FileUploader/FileUploader.js
import React from 'react';
import { useDropzone } from 'react-dropzone';
import Papa from 'papaparse';
import './FileUploader.css'; // Create this CSS file for styling

const FileUploader = ({ onFileDrop }) => {
  const onDrop = (acceptedFiles) => {
    if (acceptedFiles.length === 0) return;

    const file = acceptedFiles[0];
    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: function(results) {
        const data = results.data;
        const fields = results.meta.fields;
        onFileDrop(data, fields);
      },
      error: function(error) {
        console.error('Error parsing CSV:', error);
        alert('Error parsing CSV file.');
      }
    });
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: '.csv',
    multiple: false
  });

  return (
    <div className="file-uploader">
      <div {...getRootProps()} className={`dropzone ${isDragActive ? 'active' : ''}`}>
        <input {...getInputProps()} />
        {
          isDragActive ?
            <p>Drop the CSV file here ...</p> :
            <p>Drag 'n' drop a CSV file here, or click to select file</p>
        }
      </div>
    </div>
  );
};

export default FileUploader;

/*
Detailed Explanation:

1. **Props Received:**
   - `onFileDrop`: Function to handle the parsed CSV data and column headers.

2. **File Parsing:**
   - Uses `Papa.parse` to parse the uploaded CSV file.
   - On successful parsing, it calls `onFileDrop` with the data and headers.
   - Handles parsing errors gracefully.

3. **Styling:**
   - The `FileUploader.css` should style the dropzone area appropriately.
*/




C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/GraphVisualizer/GraphVisualizer.css:
/* src/components/GraphVisualizer/GraphVisualizer.css */

.graph-section {
  text-align: center;
  margin-top: 40px;
}

.graph-section h2 {
  color: var(--accent-color);
  margin-bottom: 20px;
}

.graph-container {
  width: 100%;
  max-width: 1800px; /* Increased max-width for wider screens */
  margin: 0 auto;
  border: 1px solid var(--border-color);
  border-radius: 10px;
  overflow: hidden;
  background-color: var(--primary-color);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  aspect-ratio: 3 / 2; /* Ensures a 3:2 aspect ratio */
}

/* ForceGraph2D Styling */
.graph-section canvas {
  background-color: var(--primary-color) !important;
}



C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/GraphVisualizer/GraphVisualizer.js:
// src/components/GraphVisualizer/GraphVisualizer.js
import React from 'react';
import ForceGraph2D from 'react-force-graph-2d';
import './GraphVisualizer.css'; // Updated path

const GraphVisualizer = ({ graphData, dimensions }) => {
  return (
    <div className="graph-section">
      <h2>Graph Visualization</h2>
      <div className="graph-container">
        <ForceGraph2D
          graphData={graphData}
          nodeAutoColorBy="type"
          linkAutoColorBy="type"
          nodeLabel="id"
          linkLabel="type"
          nodeVal={(node) => node.val}
          linkDirectionalArrowLength={graphData.directed ? 6 : 0}
          linkDirectionalArrowRelPos={0.5}
          width={dimensions.width}
          height={dimensions.height}
          cooldownTicks={300}
          enableNodeDrag={true}
          enableZoomPanInteraction={true}
          backgroundColor={null}
        />
      </div>
    </div>
  );
};

export default GraphVisualizer;

/*
Detailed Explanation:

The `GraphVisualizer` component is responsible for rendering a 2D force-directed graph based on the provided graph data. It leverages the `react-force-graph-2d` library to create interactive and dynamic graph visualizations. Here's a comprehensive breakdown of its structure and functionality:

1. **Imports**:
   - **React**: The core library for building user interfaces.
   - **ForceGraph2D** from **react-force-graph-2d**: A component for rendering 2D force-directed graphs, allowing for rich interactivity and customization.
   - **GraphVisualizer.css**: The CSS stylesheet that styles the graph visualization section, ensuring consistency with the application's design.

2. **Component Definition**:
   - **Functional Component**: `GraphVisualizer` is a functional component that accepts two props:
     - `graphData`: An object representing the graph structure, typically containing `nodes` and `links` arrays. Each node and link can have various attributes that define their properties and relationships.
     - `dimensions`: An object specifying the `width` and `height` for the graph canvas, allowing the visualization to be responsive and fit within its container.

3. **Rendering**:
   - The component returns a JSX structure comprising:
     - A `div` with the class `graph-section` that wraps the entire visualization area.
     - An `h2` header titled "Graph Visualization" to denote the purpose of the section.
     - A nested `div` with the class `graph-container` that houses the `ForceGraph2D` component, applying specific styles for layout and responsiveness.
     - **ForceGraph2D Configuration**:
       - `graphData`: Passes the graph data to the visualization component.
       - `nodeAutoColorBy="type"`: Automatically assigns colors to nodes based on their `type` attribute, enhancing visual differentiation.
       - `linkAutoColorBy="type"`: Similarly, assigns colors to links based on their `type` attribute.
       - `nodeLabel="id"`: Sets the label for each node to display its `id` attribute when hovered over.
       - `linkLabel="type"`: Sets the label for each link to display its `type` attribute when hovered over.
       - `nodeVal={(node) => node.val}`: Determines the size of each node based on its `val` attribute, allowing for size differentiation based on node importance or degree.
       - `linkDirectionalArrowLength={graphData.directed ? 6 : 0}`: Conditionally renders directional arrows on links if the graph is directed.
       - `linkDirectionalArrowRelPos={0.5}`: Positions the directional arrow at the midpoint of the link.
       - `width` and `height`: Sets the dimensions of the graph canvas based on the `dimensions` prop, ensuring the graph fits its container.
       - `cooldownTicks={300}`: Controls the simulation's cooldown ticks, affecting how long the simulation runs to stabilize node positions.
       - `enableNodeDrag={true}`: Allows users to manually drag nodes, providing interactive control over the graph layout.
       - `enableZoomPanInteraction={true}`: Enables zooming and panning within the graph, facilitating exploration of large or complex graphs.
       - `backgroundColor={null}`: Sets the background color of the graph canvas. `null` typically defaults to transparent or the parent container's background.

4. **Export**:
   - The component is exported as the default export, making it accessible for import and use in other parts of the application.

**Purpose in the Application**:
The `GraphVisualizer` is a key component for data visualization within the application. After users upload and configure their CSV data, this component takes the processed graph data and renders it interactively. Features like automatic coloring, dynamic sizing, and interactivity (dragging, zooming, panning) enhance the user's ability to analyze and understand complex relationships within the data. By leveraging `react-force-graph-2d`, the component ensures efficient rendering and smooth interactions, even with large datasets.

*/




C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/NodeEditModal/NodeEditModal.css:
/* src/components/NodeEditModal/NodeEditModal.css */

.node-edit-modal {
    position: absolute;
    top: 50%;
    left: 50%;
    right: auto;
    bottom: auto;
    transform: translate(-50%, -50%);
    background-color: var(--modal-background);
    padding: 25px;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
    color: var(--text-color);
    z-index: 1000;
    transition: opacity 0.3s ease-in-out;
    overflow-y: auto;
    max-height: 90vh;
  }
  
  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0,0,0.7);
    z-index: 999;
  }
  
  .node-edit-modal h2 {
    margin-top: 0;
    color: var(--accent-color);
    margin-bottom: 20px;
    text-align: center;
  }
  
  .node-edit-modal form {
    display: flex;
    flex-direction: column;
  }
  
  .form-group {
    margin-bottom: 15px;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: var(--text-color);
  }
  
  .form-group input[type="text"] {
    width: 100%;
    padding: 8px;
    background-color: var(--input-background);
    color: var(--input-text-color);
    border: 1px solid var(--border-color);
    border-radius: 5px;
    outline: none;
    transition: border-color 0.3s;
  }
  
  .form-group input[type="text"]:focus {
    border-color: var(--accent-color);
  }
  
  .features-list {
    display: flex;
    flex-direction: column;
  }
  
  .feature-item {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
  }
  
  .feature-item input {
    margin-right: 10px;
  }
  
  .add-feature-button {
    margin-top: 10px;
    padding: 6px 12px;
    background-color: var(--button-background);
    color: var(--text-color);
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s, transform 0.2s;
  }
  
  .add-feature-button:hover {
    background-color: var(--button-hover);
    transform: translateY(-2px);
  }
  
  /* Modal Buttons */
  .modal-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
  }
  
  .modal-buttons button {
    padding: 8px 16px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s, transform 0.2s;
  }
  
  .modal-buttons button:first-child {
    background-color: var(--button-background);
    color: var(--text-color);
  }
  
  .modal-buttons button:first-child:hover {
    background-color: var(--button-hover);
    transform: translateY(-2px);
  }
  
  .modal-buttons button:last-child {
    background-color: #e74c3c; /* Cancel Button - Red */
    color: #ffffff;
  }
  
  .modal-buttons button:last-child:hover {
    background-color: #c82333;
    transform: translateY(-2px);
  }
  


C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/NodeEditModal/NodeEditModal.js:
// src/components/NodeEditModal/NodeEditModal.js
import React, { useState, useEffect } from 'react';
import Modal from 'react-modal';
import './NodeEditModal.css'; // Create this CSS file for styling

Modal.setAppElement('#root'); // For accessibility

const NodeEditModal = ({ isOpen, onRequestClose, node, onSaveNodeEdit }) => {
  const [nodeType, setNodeType] = useState(node.type || '');
  const [nodeFeatures, setNodeFeatures] = useState(node.features || []);
  const [availableFeatures, setAvailableFeatures] = useState([]);

  useEffect(() => {
    // Dynamically generate available features based on CSV data or other logic
    // For simplicity, using a static list here
    setAvailableFeatures([
      'feature1',
      'feature2',
      'feature3',
      'feature4',
      'feature5',
    ]);
  }, [node]);

  const handleFeatureChange = (e) => {
    const { value, checked } = e.target;
    if (checked) {
      setNodeFeatures([...nodeFeatures, value]);
    } else {
      setNodeFeatures(nodeFeatures.filter((feature) => feature !== value));
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!nodeType.trim()) {
      alert('Please enter a node type.');
      return;
    }
    onSaveNodeEdit({ nodeType, nodeFeatures });
  };

  const handleAddFeature = () => {
    const newFeature = prompt('Enter new feature name:');
    if (newFeature && !availableFeatures.includes(newFeature)) {
      setAvailableFeatures([...availableFeatures, newFeature]);
      setNodeFeatures([...nodeFeatures, newFeature]);
    }
  };

  return (
    <Modal
      isOpen={isOpen}
      onRequestClose={onRequestClose}
      contentLabel="Edit Node"
      className="node-edit-modal"
      overlayClassName="overlay"
    >
      <h2>Edit Node: {node.id}</h2>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="node-type">Type:</label>
          <input
            type="text"
            id="node-type"
            value={nodeType}
            onChange={(e) => setNodeType(e.target.value)}
            required
            placeholder="e.g., User, Post"
          />
        </div>
        <div className="form-group">
          <label>Features:</label>
          <div className="features-list">
            {availableFeatures.map((feature) => (
              <div key={feature} className="feature-item">
                <input
                  type="checkbox"
                  id={`feature-${feature}`}
                  value={feature}
                  checked={nodeFeatures.includes(feature)}
                  onChange={handleFeatureChange}
                />
                <label htmlFor={`feature-${feature}`}>{feature}</label>
              </div>
            ))}
            <button type="button" onClick={handleAddFeature} className="add-feature-button">
              + Add Feature
            </button>
          </div>
        </div>
        <div className="modal-buttons">
          <button type="submit">Save</button>
          <button type="button" onClick={onRequestClose}>
            Cancel
          </button>
        </div>
      </form>
    </Modal>
  );
};

export default NodeEditModal;

/*
Detailed Explanation:

1. **Props Received:**
   - `isOpen`: Boolean indicating whether the modal is open.
   - `onRequestClose`: Function to close the modal.
   - `node`: The node object that is being edited.
   - `onSaveNodeEdit`: Function to handle saving the edited node details.

2. **State Variables:**
   - `nodeType`: Holds the current type of the node.
   - `nodeFeatures`: Holds the current list of features associated with the node.
   - `availableFeatures`: List of possible features users can assign to the node.

3. **Dynamic Features:**
   - **`handleAddFeature`**: Allows users to add new features dynamically if the existing list doesn't suffice.

4. **Form Handling:**
   - **`handleSubmit`**: Validates input and invokes `onSaveNodeEdit` with the updated type and features.
   - **`handleFeatureChange`**: Manages the selection and deselection of features.

5. **Styling:**
   - The modal uses CSS classes like `node-edit-modal`, `overlay`, `form-group`, `features-list`, `feature-item`, `add-feature-button`, and `modal-buttons` for styling. You need to create `NodeEditModal.css` to style these appropriately.

*/


C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/ReactFlowWrapper/ReactFlowWrapper.css:
/* src/components/ReactFlowWrapper/ReactFlowWrapper.css */

.wrapper {
  height: 60vh; /* 60% of the viewport height */
  width: 90%;
  max-width: 1200px;
  margin: 20px auto;
  border: 1px solid var(--border-color);
  border-radius: 10px;
  background-color: var(--primary-color);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  position: relative; /* Ensures React Flow positions correctly */
}

@media (max-width: 1200px) {
  .wrapper {
    width: 95%;
  }
}

@media (max-width: 768px) {
  .wrapper {
    height: 50vh; /* Reduce height on smaller screens */
  }
}

/* Node Styling */
.react-flow__node.default {
  background-color: var(--secondary-color);
  color: var(--text-color);
  border: 1px solid var(--border-color);
  border-radius: 5px;
  padding: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  transition: transform 0.2s, box-shadow 0.3s;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
}

.react-flow__node.default:hover {
  transform: scale(1.05);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
}

/* Edge Styling */
.react-flow__edge-path {
  stroke: var(--accent-color);
  stroke-width: 2px;
}

.react-flow__edge-arrowhead {
  fill: var(--accent-color);
}



C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/ReactFlowWrapper/ReactFlowWrapper.js:
// src/components/ReactFlowWrapper/ReactFlowWrapper.js
import React from 'react';
import ReactFlow, { Background, Controls } from 'react-flow-renderer';
import './ReactFlowWrapper.css'; 
import 'react-flow-renderer/dist/style.css'; // Import React Flow's default styles

const ReactFlowWrapper = ({ nodes, edges, onNodesChange, onEdgesChange, onConnect, onNodeClick }) => {
  const handleNodeClick = (event, node) => {
    onNodeClick(node);
  };

  return (
    <div className="wrapper">
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        onNodeClick={handleNodeClick} // Handle node clicks
        deleteKeyCode={46} /* 'delete'-key */
        fitView
        style={{ width: '100%', height: '100%' }}
      >
        <Background color="#aaa" gap={16} />
        <Controls />
      </ReactFlow>
    </div>
  );
};

export default ReactFlowWrapper;

/*
Detailed Explanation:

1. **Props Received:**
   - `nodes`: Array of node objects.
   - `edges`: Array of edge objects.
   - `onNodesChange`: Handler for node state changes.
   - `onEdgesChange`: Handler for edge state changes.
   - `onConnect`: Handler for creating new connections (edges).
   - `onNodeClick`: Handler for node click events to open the edit modal.

2. **Handling Node Clicks:**
   - **`handleNodeClick`**: Invoked when a node is clicked. It calls the `onNodeClick` prop with the clicked node as an argument.

3. **ReactFlow Components:**
   - **`Background`**: Adds a grid background to the flow diagram.
   - **`Controls`**: Provides zoom and pan controls.

4. **Styling:**
   - Ensure that `ReactFlowWrapper.css` styles the wrapper appropriately. Here's an example:


*/


C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/RelationshipModal/RelationshipModal.css:
/* src/components/RelationshipModal/RelationshipModal.css */

.relationship-modal {
  position: absolute;
  top: 50%;
  left: 50%;
  right: auto;
  bottom: auto;
  transform: translate(-50%, -50%);
  background-color: var(--modal-background);
  padding: 25px;
  border-radius: 8px;
  width: 90%;
  max-width: 400px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
  color: var(--text-color);
  z-index: 1000;
  transition: opacity 0.3s ease-in-out;
  overflow-y: auto;
  max-height: 90vh;
}

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0,0,0,0.7);
  z-index: 999;
}

.relationship-modal h2 {
  margin-top: 0;
  color: var(--accent-color);
  margin-bottom: 20px;
  text-align: center;
}

.relationship-modal form {
  display: flex;
  flex-direction: column;
}

.relationship-modal label {
  margin-bottom: 15px;
  text-align: left;
  font-weight: bold;
  color: var(--text-color);
}

.relationship-type-input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  background-color: var(--input-background);
  color: var(--input-text-color);
  border: 1px solid var(--border-color);
  border-radius: 5px;
  outline: none;
  transition: border-color 0.3s;
}

.relationship-type-input:focus {
  border-color: var(--accent-color);
}

.relationship-features-select {
  width: 100%;
  height: 100px;
  padding: 8px;
  margin-top: 5px;
  background-color: var(--select-background);
  color: var(--select-text-color);
  border: 1px solid var(--border-color);
  border-radius: 5px;
  outline: none;
  transition: border-color 0.3s;
  overflow-y: auto;
}

.relationship-features-select:focus {
  border-color: var(--accent-color);
}

.relationship-features-select option {
  background-color: var(--primary-color);
  color: var(--text-color);
}

.modal-buttons {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-top: 20px;
}

.modal-buttons button {
  padding: 8px 16px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s, transform 0.2s;
}

.modal-buttons button:first-child {
  background-color: var(--button-background);
  color: var(--text-color);
}

.modal-buttons button:first-child:hover {
  background-color: var(--button-hover);
  transform: translateY(-2px);
}

.modal-buttons button:last-child {
  background-color: #e74c3c; /* Cancel Button - Red */
  color: #ffffff;
}

.modal-buttons button:last-child:hover {
  background-color: #c82333;
  transform: translateY(-2px);
}



C:/Users/matth/Desktop/1-DSM/Research/REACT-BUILD/my-app/src/components/RelationshipModal/RelationshipModal.js:
// src/components/RelationshipModal/RelationshipModal.js
import React, { useState, useEffect } from 'react';
import Modal from 'react-modal';
import './RelationshipModal.css'; // Updated path

Modal.setAppElement('#root'); // For accessibility

const RelationshipModal = ({
  isOpen,
  onRequestClose,
  columns,
  onSaveRelationship,
}) => {
  const [relationshipType, setRelationshipType] = useState('');
  const [relationshipFeatures, setRelationshipFeatures] = useState([]);

  useEffect(() => {
    if (isOpen) {
      setRelationshipType('');
      setRelationshipFeatures([]);
    }
  }, [isOpen]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!relationshipType.trim()) {
      alert('Please enter a relationship type.');
      return;
    }
    onSaveRelationship({ relationshipType, relationshipFeatures });
    // Reset modal state
    setRelationshipType('');
    setRelationshipFeatures([]);
  };

  const handleFeatureChange = (e) => {
    const selectedOptions = Array.from(e.target.selectedOptions).map(option => option.value);
    setRelationshipFeatures(selectedOptions);
  };

  return (
    <Modal
      isOpen={isOpen}
      onRequestClose={onRequestClose}
      contentLabel="Relationship Configuration"
      className="relationship-modal"
      overlayClassName="overlay"
    >
      <h2>Configure Relationship</h2>
      <form onSubmit={handleSubmit}>
        <label>
          Relationship Type:
          <input
            type="text"
            value={relationshipType}
            onChange={(e) => setRelationshipType(e.target.value)}
            required
            className="relationship-type-input"
            placeholder="e.g., connects, influences"
          />
        </label>
        <label>
          Features:
          <select
            multiple
            value={relationshipFeatures}
            onChange={handleFeatureChange}
            className="relationship-features-select"
          >
            {columns.map((col) => (
              <option key={col} value={col}>
                {col}
              </option>
            ))}
          </select>
        </label>
        <div className="modal-buttons">
          <button type="submit">Save</button>
          <button type="button" onClick={onRequestClose}>
            Cancel
          </button>
        </div>
      </form>
    </Modal>
  );
};

export default RelationshipModal;

/*
Detailed Explanation:

The `RelationshipModal` component provides a modal dialog that allows users to configure relationships between different data columns. This modal is essential for defining how various entities within the uploaded CSV data relate to each other, facilitating the creation of meaningful graph structures. Here's a comprehensive breakdown of its structure and functionality:

1. **Imports**:
   - **React**, **useState**, **useEffect**: Core React library and hooks for managing state and side effects within the component.
   - **Modal** from **react-modal**: A library for creating accessible modal dialogs in React applications.
   - **RelationshipModal.css**: The CSS stylesheet that styles the modal, ensuring it aligns with the application's design and accessibility standards.

2. **Accessibility Setup**:
   - `Modal.setAppElement('#root')`: Sets the root element of the app for accessibility purposes, ensuring that screen readers and other assistive technologies can appropriately handle the modal's presence.

3. **Component Definition**:
   - **Functional Component**: `RelationshipModal` is a functional component that accepts the following props:
     - `isOpen`: A boolean that determines whether the modal is open or closed.
     - `onRequestClose`: A callback function that is invoked when the modal requests to be closed (e.g., when the user clicks outside the modal or presses the escape key).
     - `columns`: An array of column names or objects representing the data columns available for defining relationships.
     - `onSaveRelationship`: A callback function that is invoked when the user saves the relationship configuration. It receives an object containing the `relationshipType` and `relationshipFeatures`.

4. **State Management**:
   - **`relationshipType`**: A state variable that holds the type of relationship being defined (e.g., "connects", "influences"). It's initialized to an empty string.
   - **`relationshipFeatures`**: A state variable that holds an array of selected features associated with the relationship. It's initialized to an empty array.

5. **Side Effects (`useEffect`)**:
   - Monitors the `isOpen` prop. When the modal is opened (`isOpen` becomes `true`), it resets the `relationshipType` and `relationshipFeatures` to their initial states, ensuring that each time the modal is opened, it starts fresh without residual data from previous interactions.

6. **Event Handlers**:
   - **`handleSubmit`**:
     - Prevents the default form submission behavior.
     - Validates that the `relationshipType` is not empty. If it is, it alerts the user to enter a relationship type.
     - Invokes the `onSaveRelationship` prop with an object containing the `relationshipType` and `relationshipFeatures`.
     - Resets the modal's state by clearing `relationshipType` and `relationshipFeatures`.
   - **`handleFeatureChange`**:
     - Handles changes to the multi-select input for relationship features.
     - Extracts the selected options and updates the `relationshipFeatures` state accordingly.

7. **Rendering**:
   - Utilizes the `Modal` component to create an accessible modal dialog with the following configurations:
     - **`isOpen`**: Controls the visibility of the modal based on the `isOpen` prop.
     - **`onRequestClose`**: Assigns the callback for closing the modal.
     - **`contentLabel`**: Provides an accessible label for the modal content.
     - **`className` and `overlayClassName`**: Assigns CSS classes for styling the modal and its overlay, respectively.
   - Inside the modal:
     - An `h2` header titled "Configure Relationship" to indicate the modal's purpose.
     - A `form` element that contains:
       - **Relationship Type Input**:
         - A labeled text input where users can specify the type of relationship.
         - Includes a placeholder example (e.g., "connects", "influences") to guide users.
       - **Features Selection**:
         - A labeled multi-select dropdown that allows users to select multiple features related to the relationship.
         - Dynamically generates `option` elements based on the `columns` prop, ensuring that users can associate relevant data columns with the relationship.
       - **Buttons**:
         - **Save**: A submit button that triggers the `handleSubmit` function to save the relationship configuration.
         - **Cancel**: A button that invokes the `onRequestClose` callback to close the modal without saving changes.

8. **Export**:
   - The component is exported as the default export, making it accessible for import and use in other parts of the application.

**Purpose in the Application**:
The `RelationshipModal` is integral for defining how different data entities interact within the graph. By allowing users to specify the type and features of relationships, it enables the application to construct more nuanced and informative graph structures. This customization ensures that the resulting visualizations accurately reflect the underlying data relationships, enhancing data analysis and insights.

*/




