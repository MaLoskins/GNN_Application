my-app/src/components/ConfigurationPanel/ConfigurationPanel.css:
/* src/components/ConfigurationPanel/ConfigurationPanel.css */

.config-section {
  text-align: left;
  max-width: 1200px; /* Increased max-width for wider screens */
  margin: 0 auto 30px;
  padding: 25px;
  border: 1px solid var(--border-color);
  border-radius: 10px;
  background-color: var(--primary-color);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.config-section h2 {
  margin-top: 0;
  color: var(--accent-color);
}

.config-section p {
  color: var(--secondary-text-color);
  line-height: 1.6;
}

/* Submit Button */
.config-section button {
  background-color: var(--button-background);
  color: var(--text-color);
  border: none;
  padding: 12px 20px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s, transform 0.2s;
}

.config-section button:hover {
  background-color: var(--button-hover);
  transform: translateY(-2px);
}

.config-section button:disabled {
  background-color: #555555;
  cursor: not-allowed;
}



my-app/src/components/ConfigurationPanel/ConfigurationPanel.js:
// src/components/ConfigurationPanel/ConfigurationPanel.js
import React from 'react';
import './ConfigurationPanel.css'; // Updated path

const ConfigurationPanel = ({ columns, onSubmit, loading }) => {
  return (
    <div className="config-section">
      <h2>Configuration</h2>
      <p>
        Drag connections between columns to define relationships. After connecting, specify the relationship type and features.
      </p>
      <button onClick={onSubmit} disabled={loading}>
        {loading ? 'Processing...' : 'Submit Configuration'}
      </button>
    </div>
  );
};

export default ConfigurationPanel;

/*
Detailed Explanation:

The `ConfigurationPanel` component serves as a user interface element that allows users to configure relationships between different data columns within the application. Here's a breakdown of its structure and functionality:

1. **Imports**:
   - **React**: The core library for building user interfaces in React.
   - **ConfigurationPanel.css**: The CSS stylesheet that styles the component, ensuring it adheres to the application's design system.

2. **Component Definition**:
   - **Functional Component**: `ConfigurationPanel` is defined as a functional component that accepts three props:
     - `columns`: An array of column names or objects representing the data columns available for configuration.
     - `onSubmit`: A callback function that is invoked when the user clicks the "Submit Configuration" button. This function likely handles the submission of the configured relationships to the backend or updates the application's state.
     - `loading`: A boolean value indicating whether a submission process is currently ongoing. When `loading` is `true`, the submit button is disabled and displays "Processing..." to inform the user that their submission is being processed.

3. **Rendering**:
   - The component returns a JSX structure comprising:
     - A `div` with the class `config-section` that encapsulates the entire configuration panel, applying styles defined in the CSS file.
     - An `h2` header titled "Configuration" to denote the purpose of the panel.
     - A `p` tag containing instructional text guiding the user on how to define relationships by dragging connections between columns and specifying relationship types and features.
     - A `button` element that triggers the `onSubmit` function when clicked. The button's label dynamically changes based on the `loading` state:
       - Displays "Processing..." when `loading` is `true`.
       - Displays "Submit Configuration" when `loading` is `false`.
     - The button is disabled during the loading state to prevent multiple submissions.

4. **Export**:
   - The component is exported as the default export, allowing it to be easily imported and used in other parts of the application.

**Purpose in the Application**:
The `ConfigurationPanel` is a crucial component that facilitates user interaction for setting up data relationships. By allowing users to define how different data columns relate to each other, it enables the dynamic generation of graphs or other data visualizations based on user-defined configurations. This component likely interacts closely with other components like `ReactFlowWrapper` for visualizing relationships and `App.js` for managing the overall application state.

*/




my-app/src/components/FileUploader/FileUploader.css:
/* src/components/FileUploader/FileUploader.css */

.dropzone {
  border: 2px dashed var(--dropzone-border);
  border-radius: 10px;
  padding: 40px;
  cursor: pointer;
  margin-bottom: 20px;
  background-color: var(--dropzone-background);
  transition: background-color 0.3s, border-color 0.3s;
}

.dropzone:hover {
  background-color: var(--secondary-color);
  border-color: var(--accent-color);
}

.dropzone p {
  margin: 0;
  font-size: 16px;
  color: var(--secondary-text-color);
}



my-app/src/components/FileUploader/FileUploader.js:
// src/components/FileUploader/FileUploader.js
import React from 'react';
import { useDropzone } from 'react-dropzone';
import Papa from 'papaparse';
import './FileUploader.css'; // Updated path

const FileUploader = ({ onFileDrop }) => {
  const onDrop = (acceptedFiles) => {
    if (acceptedFiles.length === 0) return;
    const file = acceptedFiles[0];
    Papa.parse(file, {
      header: true,
      dynamicTyping: true,
      complete: (results) => {
        onFileDrop(results.data, results.meta.fields);
      },
      error: (error) => {
        console.error('Error parsing CSV:', error);
      },
    });
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: '.csv',
  });

  return (
    <div {...getRootProps()} className="dropzone">
      <input {...getInputProps()} />
      {isDragActive ? (
        <p>Drop the CSV file here...</p>
      ) : (
        <p>Drag and drop a CSV file here, or click to select file</p>
      )}
    </div>
  );
};

export default FileUploader;

/*
Detailed Explanation:

The `FileUploader` component provides a user interface for uploading CSV files by allowing users to drag and drop files or select them via a file dialog. Here's an in-depth look at its functionality:

1. **Imports**:
   - **React**: The primary library for building user interfaces.
   - **useDropzone** from **react-dropzone**: A custom hook that facilitates drag-and-drop file uploads.
   - **Papa** from **papaparse**: A powerful CSV parsing library used to convert CSV files into usable JavaScript objects.
   - **FileUploader.css**: The CSS stylesheet that styles the dropzone area and its elements.

2. **Component Definition**:
   - **Functional Component**: `FileUploader` is a functional component that accepts one prop:
     - `onFileDrop`: A callback function that is invoked after successfully parsing the CSV file. It receives two arguments:
       - `results.data`: An array of objects representing the rows in the CSV file.
       - `results.meta.fields`: An array of strings representing the header fields (column names) of the CSV.

3. **File Handling (`onDrop` Function)**:
   - **File Validation**: The function first checks if any files have been dropped. If no files are present (`acceptedFiles.length === 0`), it exits early.
   - **CSV Parsing**:
     - **Selection**: It selects the first file from the dropped files (`acceptedFiles[0]`), assuming only one file is to be processed.
     - **Papa.parse Configuration**:
       - `header: true`: Instructs PapaParse to treat the first row of the CSV as headers.
       - `dynamicTyping: true`: Enables automatic type conversion (e.g., strings to numbers).
       - `complete`: A callback function that is executed upon successful parsing, which then calls the `onFileDrop` prop with the parsed data and headers.
       - `error`: A callback function that logs any errors encountered during parsing to the console.

4. **Dropzone Setup**:
   - **useDropzone Hook**: Initializes the dropzone with specific configurations:
     - `onDrop`: The function defined above to handle file drops.
     - `accept: '.csv'`: Restricts the dropzone to accept only CSV files.

5. **Rendering**:
   - **Dropzone Area**:
     - A `div` is rendered with properties and event handlers spread from `getRootProps()`, and it is assigned the class `dropzone` for styling.
     - An `input` element is included with properties spread from `getInputProps()`, which manages file selection via the dialog.
     - **Dynamic Text**: The content inside the `div` changes based on the `isDragActive` state:
       - When a file is being dragged over the dropzone, it displays "Drop the CSV file here...".
       - Otherwise, it displays "Drag and drop a CSV file here, or click to select file".

6. **Export**:
   - The component is exported as the default export, making it available for use in other parts of the application.

**Purpose in the Application**:
The `FileUploader` component is essential for importing data into the application. By allowing users to upload CSV files, it enables the application to process and visualize data based on user-provided datasets. The integration of `react-dropzone` and `papaparse` ensures a smooth and efficient file upload and parsing experience, handling common edge cases like invalid file types and parsing errors gracefully.

*/




my-app/src/components/GraphVisualizer/GraphVisualizer.css:
/* src/components/GraphVisualizer/GraphVisualizer.css */

.graph-section {
  text-align: center;
  margin-top: 40px;
}

.graph-section h2 {
  color: var(--accent-color);
  margin-bottom: 20px;
}

.graph-container {
  width: 100%;
  max-width: 1800px; /* Increased max-width for wider screens */
  margin: 0 auto;
  border: 1px solid var(--border-color);
  border-radius: 10px;
  overflow: hidden;
  background-color: var(--primary-color);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  aspect-ratio: 3 / 2; /* Ensures a 3:2 aspect ratio */
}

/* ForceGraph2D Styling */
.graph-section canvas {
  background-color: var(--primary-color) !important;
}



my-app/src/components/GraphVisualizer/GraphVisualizer.js:
// src/components/GraphVisualizer/GraphVisualizer.js
import React from 'react';
import ForceGraph2D from 'react-force-graph-2d';
import './GraphVisualizer.css'; // Updated path

const GraphVisualizer = ({ graphData, dimensions }) => {
  return (
    <div className="graph-section">
      <h2>Graph Visualization</h2>
      <div className="graph-container">
        <ForceGraph2D
          graphData={graphData}
          nodeAutoColorBy="type"
          linkAutoColorBy="type"
          nodeLabel="id"
          linkLabel="type"
          nodeVal={(node) => node.val}
          linkDirectionalArrowLength={graphData.directed ? 6 : 0}
          linkDirectionalArrowRelPos={0.5}
          width={dimensions.width}
          height={dimensions.height}
          cooldownTicks={300}
          enableNodeDrag={true}
          enableZoomPanInteraction={true}
          backgroundColor={null}
        />
      </div>
    </div>
  );
};

export default GraphVisualizer;

/*
Detailed Explanation:

The `GraphVisualizer` component is responsible for rendering a 2D force-directed graph based on the provided graph data. It leverages the `react-force-graph-2d` library to create interactive and dynamic graph visualizations. Here's a comprehensive breakdown of its structure and functionality:

1. **Imports**:
   - **React**: The core library for building user interfaces.
   - **ForceGraph2D** from **react-force-graph-2d**: A component for rendering 2D force-directed graphs, allowing for rich interactivity and customization.
   - **GraphVisualizer.css**: The CSS stylesheet that styles the graph visualization section, ensuring consistency with the application's design.

2. **Component Definition**:
   - **Functional Component**: `GraphVisualizer` is a functional component that accepts two props:
     - `graphData`: An object representing the graph structure, typically containing `nodes` and `links` arrays. Each node and link can have various attributes that define their properties and relationships.
     - `dimensions`: An object specifying the `width` and `height` for the graph canvas, allowing the visualization to be responsive and fit within its container.

3. **Rendering**:
   - The component returns a JSX structure comprising:
     - A `div` with the class `graph-section` that wraps the entire visualization area.
     - An `h2` header titled "Graph Visualization" to denote the purpose of the section.
     - A nested `div` with the class `graph-container` that houses the `ForceGraph2D` component, applying specific styles for layout and responsiveness.
     - **ForceGraph2D Configuration**:
       - `graphData`: Passes the graph data to the visualization component.
       - `nodeAutoColorBy="type"`: Automatically assigns colors to nodes based on their `type` attribute, enhancing visual differentiation.
       - `linkAutoColorBy="type"`: Similarly, assigns colors to links based on their `type` attribute.
       - `nodeLabel="id"`: Sets the label for each node to display its `id` attribute when hovered over.
       - `linkLabel="type"`: Sets the label for each link to display its `type` attribute when hovered over.
       - `nodeVal={(node) => node.val}`: Determines the size of each node based on its `val` attribute, allowing for size differentiation based on node importance or degree.
       - `linkDirectionalArrowLength={graphData.directed ? 6 : 0}`: Conditionally renders directional arrows on links if the graph is directed.
       - `linkDirectionalArrowRelPos={0.5}`: Positions the directional arrow at the midpoint of the link.
       - `width` and `height`: Sets the dimensions of the graph canvas based on the `dimensions` prop, ensuring the graph fits its container.
       - `cooldownTicks={300}`: Controls the simulation's cooldown ticks, affecting how long the simulation runs to stabilize node positions.
       - `enableNodeDrag={true}`: Allows users to manually drag nodes, providing interactive control over the graph layout.
       - `enableZoomPanInteraction={true}`: Enables zooming and panning within the graph, facilitating exploration of large or complex graphs.
       - `backgroundColor={null}`: Sets the background color of the graph canvas. `null` typically defaults to transparent or the parent container's background.

4. **Export**:
   - The component is exported as the default export, making it accessible for import and use in other parts of the application.

**Purpose in the Application**:
The `GraphVisualizer` is a key component for data visualization within the application. After users upload and configure their CSV data, this component takes the processed graph data and renders it interactively. Features like automatic coloring, dynamic sizing, and interactivity (dragging, zooming, panning) enhance the user's ability to analyze and understand complex relationships within the data. By leveraging `react-force-graph-2d`, the component ensures efficient rendering and smooth interactions, even with large datasets.

*/




my-app/src/components/output.txt:
./ConfigurationPanel/ConfigurationPanel.css:
/* src/components/ConfigurationPanel/ConfigurationPanel.css */

.config-section {
  text-align: left;
  max-width: 1200px; /* Increased max-width for wider screens */
  margin: 0 auto 30px;
  padding: 25px;
  border: 1px solid var(--border-color);
  border-radius: 10px;
  background-color: var(--primary-color);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.config-section h2 {
  margin-top: 0;
  color: var(--accent-color);
}

.config-section p {
  color: var(--secondary-text-color);
  line-height: 1.6;
}

/* Submit Button */
.config-section button {
  background-color: var(--button-background);
  color: var(--text-color);
  border: none;
  padding: 12px 20px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s, transform 0.2s;
}

.config-section button:hover {
  background-color: var(--button-hover);
  transform: translateY(-2px);
}

.config-section button:disabled {
  background-color: #555555;
  cursor: not-allowed;
}



./ConfigurationPanel/ConfigurationPanel.js:
// src/components/ConfigurationPanel/ConfigurationPanel.js
import React from 'react';
import './ConfigurationPanel.css'; // Updated path

const ConfigurationPanel = ({ columns, onSubmit, loading }) => {
  return (
    <div className="config-section">
      <h2>Configuration</h2>
      <p>
        Drag connections between columns to define relationships. After connecting, specify the relationship type and features.
      </p>
      <button onClick={onSubmit} disabled={loading}>
        {loading ? 'Processing...' : 'Submit Configuration'}
      </button>
    </div>
  );
};

export default ConfigurationPanel;



./FileUploader/FileUploader.css:
/* src/components/FileUploader/FileUploader.css */

.dropzone {
  border: 2px dashed var(--dropzone-border);
  border-radius: 10px;
  padding: 40px;
  cursor: pointer;
  margin-bottom: 20px;
  background-color: var(--dropzone-background);
  transition: background-color 0.3s, border-color 0.3s;
}

.dropzone:hover {
  background-color: var(--secondary-color);
  border-color: var(--accent-color);
}

.dropzone p {
  margin: 0;
  font-size: 16px;
  color: var(--secondary-text-color);
}



./FileUploader/FileUploader.js:
// src/components/FileUploader/FileUploader.js
import React from 'react';
import { useDropzone } from 'react-dropzone';
import Papa from 'papaparse';
import './FileUploader.css'; // Updated path

const FileUploader = ({ onFileDrop }) => {
  const onDrop = (acceptedFiles) => {
    if (acceptedFiles.length === 0) return;
    const file = acceptedFiles[0];
    Papa.parse(file, {
      header: true,
      dynamicTyping: true,
      complete: (results) => {
        onFileDrop(results.data, results.meta.fields);
      },
      error: (error) => {
        console.error('Error parsing CSV:', error);
      },
    });
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: '.csv',
  });

  return (
    <div {...getRootProps()} className="dropzone">
      <input {...getInputProps()} />
      {isDragActive ? (
        <p>Drop the CSV file here...</p>
      ) : (
        <p>Drag and drop a CSV file here, or click to select file</p>
      )}
    </div>
  );
};

export default FileUploader;



./GraphVisualizer/GraphVisualizer.css:
/* src/components/GraphVisualizer/GraphVisualizer.css */

.graph-section {
  text-align: center;
  margin-top: 40px;
}

.graph-section h2 {
  color: var(--accent-color);
  margin-bottom: 20px;
}

.graph-container {
  width: 100%;
  max-width: 1800px; /* Increased max-width for wider screens */
  margin: 0 auto;
  border: 1px solid var(--border-color);
  border-radius: 10px;
  overflow: hidden;
  background-color: var(--primary-color);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  aspect-ratio: 3 / 2; /* Ensures a 3:2 aspect ratio */
}

/* ForceGraph2D Styling */
.graph-section canvas {
  background-color: var(--primary-color) !important;
}



./GraphVisualizer/GraphVisualizer.js:
// src/components/GraphVisualizer/GraphVisualizer.js
import React from 'react';
import ForceGraph2D from 'react-force-graph-2d';
import './GraphVisualizer.css'; // Updated path

const GraphVisualizer = ({ graphData, dimensions }) => {
  return (
    <div className="graph-section">
      <h2>Graph Visualization</h2>
      <div className="graph-container">
        <ForceGraph2D
          graphData={graphData}
          nodeAutoColorBy="type"
          linkAutoColorBy="type"
          nodeLabel="id"
          linkLabel="type"
          nodeVal={(node) => node.val}
          linkDirectionalArrowLength={graphData.directed ? 6 : 0}
          linkDirectionalArrowRelPos={0.5}
          width={dimensions.width}
          height={dimensions.height}
          cooldownTicks={300}
          enableNodeDrag={true}
          enableZoomPanInteraction={true}
          backgroundColor={null}
        />
      </div>
    </div>
  );
};

export default GraphVisualizer;



./RelationshipModal/RelationshipModal.css:
/* src/components/RelationshipModal/RelationshipModal.css */

.relationship-modal {
  position: absolute;
  top: 50%;
  left: 50%;
  right: auto;
  bottom: auto;
  transform: translate(-50%, -50%);
  background-color: var(--modal-background);
  padding: 25px;
  border-radius: 8px;
  width: 90%;
  max-width: 400px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
  color: var(--text-color);
  z-index: 1000;
  transition: opacity 0.3s ease-in-out;
  overflow-y: auto;
  max-height: 90vh;
}

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0,0,0,0.7);
  z-index: 999;
}

.relationship-modal h2 {
  margin-top: 0;
  color: var(--accent-color);
  margin-bottom: 20px;
  text-align: center;
}

.relationship-modal form {
  display: flex;
  flex-direction: column;
}

.relationship-modal label {
  margin-bottom: 15px;
  text-align: left;
  font-weight: bold;
  color: var(--text-color);
}

.relationship-type-input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  background-color: var(--input-background);
  color: var(--input-text-color);
  border: 1px solid var(--border-color);
  border-radius: 5px;
  outline: none;
  transition: border-color 0.3s;
}

.relationship-type-input:focus {
  border-color: var(--accent-color);
}

.relationship-features-select {
  width: 100%;
  height: 100px;
  padding: 8px;
  margin-top: 5px;
  background-color: var(--select-background);
  color: var(--select-text-color);
  border: 1px solid var(--border-color);
  border-radius: 5px;
  outline: none;
  transition: border-color 0.3s;
  overflow-y: auto;
}

.relationship-features-select:focus {
  border-color: var(--accent-color);
}

.relationship-features-select option {
  background-color: var(--primary-color);
  color: var(--text-color);
}

.modal-buttons {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-top: 20px;
}

.modal-buttons button {
  padding: 8px 16px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s, transform 0.2s;
}

.modal-buttons button:first-child {
  background-color: var(--button-background);
  color: var(--text-color);
}

.modal-buttons button:first-child:hover {
  background-color: var(--button-hover);
  transform: translateY(-2px);
}

.modal-buttons button:last-child {
  background-color: #e74c3c; /* Cancel Button - Red */
  color: #ffffff;
}

.modal-buttons button:last-child:hover {
  background-color: #c82333;
  transform: translateY(-2px);
}



./RelationshipModal/RelationshipModal.js:
// src/components/RelationshipModal/RelationshipModal.js
import React, { useState, useEffect } from 'react';
import Modal from 'react-modal';
import './RelationshipModal.css'; // Updated path

Modal.setAppElement('#root'); // For accessibility

const RelationshipModal = ({
  isOpen,
  onRequestClose,
  columns,
  onSaveRelationship,
}) => {
  const [relationshipType, setRelationshipType] = useState('');
  const [relationshipFeatures, setRelationshipFeatures] = useState([]);

  useEffect(() => {
    if (isOpen) {
      setRelationshipType('');
      setRelationshipFeatures([]);
    }
  }, [isOpen]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!relationshipType.trim()) {
      alert('Please enter a relationship type.');
      return;
    }
    onSaveRelationship({ relationshipType, relationshipFeatures });
    // Reset modal state
    setRelationshipType('');
    setRelationshipFeatures([]);
  };

  const handleFeatureChange = (e) => {
    const selectedOptions = Array.from(e.target.selectedOptions).map(option => option.value);
    setRelationshipFeatures(selectedOptions);
  };

  return (
    <Modal
      isOpen={isOpen}
      onRequestClose={onRequestClose}
      contentLabel="Relationship Configuration"
      className="relationship-modal"
      overlayClassName="overlay"
    >
      <h2>Configure Relationship</h2>
      <form onSubmit={handleSubmit}>
        <label>
          Relationship Type:
          <input
            type="text"
            value={relationshipType}
            onChange={(e) => setRelationshipType(e.target.value)}
            required
            className="relationship-type-input"
            placeholder="e.g., connects, influences"
          />
        </label>
        <label>
          Features:
          <select
            multiple
            value={relationshipFeatures}
            onChange={handleFeatureChange}
            className="relationship-features-select"
          >
            {columns.map((col) => (
              <option key={col} value={col}>
                {col}
              </option>
            ))}
          </select>
        </label>
        <div className="modal-buttons">
          <button type="submit">Save</button>
          <button type="button" onClick={onRequestClose}>
            Cancel
          </button>
        </div>
      </form>
    </Modal>
  );
};

export default RelationshipModal;






my-app/src/components/ReactFlowWrapper/ReactFlowWrapper.css:
/* src/components/ReactFlowWrapper/ReactFlowWrapper.css */

.wrapper {
  height: 60vh; /* 60% of the viewport height */
  width: 90%;
  max-width: 1200px;
  margin: 0 auto 30px;
  border: 1px solid var(--border-color);
  border-radius: 10px;
  background-color: var(--primary-color);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  /* Removed padding to prevent node overflow */
  position: relative; /* Ensures React Flow positions correctly */
}

@media (max-width: 1200px) {
  .wrapper {
    width: 95%;
  }
}

@media (max-width: 768px) {
  .wrapper {
    height: 50vh; /* Reduce height on smaller screens */
  }
}

/* Node Styling */
.node {
  background-color: var(--secondary-color);
  color: var(--text-color);
  border: 1px solid var(--border-color);
  border-radius: 5px;
  padding: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  transition: transform 0.2s, box-shadow 0.3s;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
}

.node:hover {
  transform: scale(1.05);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
}

/* Edge Styling */
.edgePath {
  stroke: var(--accent-color);
  stroke-width: 2px;
}

.edgeArrowhead {
  fill: var(--accent-color);
}



my-app/src/components/ReactFlowWrapper/ReactFlowWrapper.js:
// src/components/ReactFlowWrapper/ReactFlowWrapper.js
import React from 'react';
import ReactFlow from 'react-flow-renderer';
import './ReactFlowWrapper.css'; // Correct Import
import 'react-flow-renderer/dist/style.css'; // Import React Flow's default styles

const ReactFlowWrapper = ({ nodes, edges, onNodesChange, onEdgesChange, onConnect }) => {
  return (
    <div className={'wrapper'}>
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        deleteKeyCode={46} /* 'delete'-key */
        fitView
        style={{ width: '100%', height: '100%' }}
      />
    </div>
  );
};

export default ReactFlowWrapper;

/*
Detailed Explanation:

The `ReactFlowWrapper` component encapsulates the `ReactFlow` component from the `react-flow-renderer` library, providing a streamlined interface for rendering and managing interactive flow diagrams or node-based graphs within the application. Here's an in-depth look at its structure and functionality:

1. **Imports**:
   - **React**: The primary library for building user interfaces.
   - **ReactFlow** from **react-flow-renderer**: A component that facilitates the creation of interactive, customizable flow diagrams, allowing for features like node dragging, zooming, and dynamic edge creation.
   - **ReactFlowWrapper.css**: The CSS stylesheet that styles the wrapper and ensures the flow diagram fits within its container.
   - **'react-flow-renderer/dist/style.css'**: Imports the default styles provided by `react-flow-renderer`, ensuring that the flow diagram has baseline styling and functionality out of the box.

2. **Component Definition**:
   - **Functional Component**: `ReactFlowWrapper` is a functional component that accepts the following props:
     - `nodes`: An array of node objects defining the individual elements within the flow diagram. Each node typically includes properties like `id`, `type`, `position`, and `data`.
     - `edges`: An array of edge objects defining the connections between nodes. Each edge includes properties like `id`, `source`, `target`, and potentially custom data.
     - `onNodesChange`: A callback function that handles updates or changes to the nodes, such as repositioning or editing node data.
     - `onEdgesChange`: A callback function that manages updates or changes to the edges, like adding or removing connections.
     - `onConnect`: A callback function that is invoked when a new connection (edge) is created between nodes, typically by dragging from one node to another.

3. **Rendering**:
   - The component returns a JSX structure comprising:
     - A `div` with the class `wrapper` that serves as the container for the flow diagram. This container is styled via `ReactFlowWrapper.css` to ensure proper sizing, layout, and responsiveness.
     - Inside the `div`, the `ReactFlow` component is rendered with the following configurations:
       - **Data Props**:
         - `nodes`: Passes the array of node objects to define the nodes within the flow.
         - `edges`: Passes the array of edge objects to define the connections between nodes.
       - **Event Handlers**:
         - `onNodesChange`: Assigns the callback for handling changes to nodes.
         - `onEdgesChange`: Assigns the callback for handling changes to edges.
         - `onConnect`: Assigns the callback for handling the creation of new connections between nodes.
       - **Additional Configurations**:
         - `deleteKeyCode={46}`: Specifies that pressing the 'Delete' key (key code 46) will delete selected nodes or edges.
         - `fitView`: Automatically adjusts the view to fit all nodes and edges within the visible area, ensuring that the entire flow is visible upon rendering or resizing.
         - `style={{ width: '100%', height: '100%' }}`: Ensures that the `ReactFlow` component occupies the full width and height of its parent container (`div.wrapper`), allowing for responsive resizing and proper layout.

4. **Export**:
   - The component is exported as the default export, enabling it to be easily imported and used in other parts of the application.

**Purpose in the Application**:
The `ReactFlowWrapper` component is pivotal for visualizing and managing the relationships between different data columns or entities within the application. By leveraging `react-flow-renderer`, it provides users with an intuitive interface to create, modify, and visualize connections in a node-based graph format. Features like node dragging, dynamic edge creation, and responsive resizing enhance the user experience, making it easier to understand and interact with complex data relationships. This component likely interacts closely with the `ConfigurationPanel` and `RelationshipModal` components to reflect user-defined configurations in real-time visualizations.

*/




my-app/src/components/RelationshipModal/RelationshipModal.css:
/* src/components/RelationshipModal/RelationshipModal.css */

.relationship-modal {
  position: absolute;
  top: 50%;
  left: 50%;
  right: auto;
  bottom: auto;
  transform: translate(-50%, -50%);
  background-color: var(--modal-background);
  padding: 25px;
  border-radius: 8px;
  width: 90%;
  max-width: 400px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
  color: var(--text-color);
  z-index: 1000;
  transition: opacity 0.3s ease-in-out;
  overflow-y: auto;
  max-height: 90vh;
}

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0,0,0,0.7);
  z-index: 999;
}

.relationship-modal h2 {
  margin-top: 0;
  color: var(--accent-color);
  margin-bottom: 20px;
  text-align: center;
}

.relationship-modal form {
  display: flex;
  flex-direction: column;
}

.relationship-modal label {
  margin-bottom: 15px;
  text-align: left;
  font-weight: bold;
  color: var(--text-color);
}

.relationship-type-input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  background-color: var(--input-background);
  color: var(--input-text-color);
  border: 1px solid var(--border-color);
  border-radius: 5px;
  outline: none;
  transition: border-color 0.3s;
}

.relationship-type-input:focus {
  border-color: var(--accent-color);
}

.relationship-features-select {
  width: 100%;
  height: 100px;
  padding: 8px;
  margin-top: 5px;
  background-color: var(--select-background);
  color: var(--select-text-color);
  border: 1px solid var(--border-color);
  border-radius: 5px;
  outline: none;
  transition: border-color 0.3s;
  overflow-y: auto;
}

.relationship-features-select:focus {
  border-color: var(--accent-color);
}

.relationship-features-select option {
  background-color: var(--primary-color);
  color: var(--text-color);
}

.modal-buttons {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-top: 20px;
}

.modal-buttons button {
  padding: 8px 16px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s, transform 0.2s;
}

.modal-buttons button:first-child {
  background-color: var(--button-background);
  color: var(--text-color);
}

.modal-buttons button:first-child:hover {
  background-color: var(--button-hover);
  transform: translateY(-2px);
}

.modal-buttons button:last-child {
  background-color: #e74c3c; /* Cancel Button - Red */
  color: #ffffff;
}

.modal-buttons button:last-child:hover {
  background-color: #c82333;
  transform: translateY(-2px);
}



my-app/src/components/RelationshipModal/RelationshipModal.js:
// src/components/RelationshipModal/RelationshipModal.js
import React, { useState, useEffect } from 'react';
import Modal from 'react-modal';
import './RelationshipModal.css'; // Updated path

Modal.setAppElement('#root'); // For accessibility

const RelationshipModal = ({
  isOpen,
  onRequestClose,
  columns,
  onSaveRelationship,
}) => {
  const [relationshipType, setRelationshipType] = useState('');
  const [relationshipFeatures, setRelationshipFeatures] = useState([]);

  useEffect(() => {
    if (isOpen) {
      setRelationshipType('');
      setRelationshipFeatures([]);
    }
  }, [isOpen]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!relationshipType.trim()) {
      alert('Please enter a relationship type.');
      return;
    }
    onSaveRelationship({ relationshipType, relationshipFeatures });
    // Reset modal state
    setRelationshipType('');
    setRelationshipFeatures([]);
  };

  const handleFeatureChange = (e) => {
    const selectedOptions = Array.from(e.target.selectedOptions).map(option => option.value);
    setRelationshipFeatures(selectedOptions);
  };

  return (
    <Modal
      isOpen={isOpen}
      onRequestClose={onRequestClose}
      contentLabel="Relationship Configuration"
      className="relationship-modal"
      overlayClassName="overlay"
    >
      <h2>Configure Relationship</h2>
      <form onSubmit={handleSubmit}>
        <label>
          Relationship Type:
          <input
            type="text"
            value={relationshipType}
            onChange={(e) => setRelationshipType(e.target.value)}
            required
            className="relationship-type-input"
            placeholder="e.g., connects, influences"
          />
        </label>
        <label>
          Features:
          <select
            multiple
            value={relationshipFeatures}
            onChange={handleFeatureChange}
            className="relationship-features-select"
          >
            {columns.map((col) => (
              <option key={col} value={col}>
                {col}
              </option>
            ))}
          </select>
        </label>
        <div className="modal-buttons">
          <button type="submit">Save</button>
          <button type="button" onClick={onRequestClose}>
            Cancel
          </button>
        </div>
      </form>
    </Modal>
  );
};

export default RelationshipModal;

/*
Detailed Explanation:

The `RelationshipModal` component provides a modal dialog that allows users to configure relationships between different data columns. This modal is essential for defining how various entities within the uploaded CSV data relate to each other, facilitating the creation of meaningful graph structures. Here's a comprehensive breakdown of its structure and functionality:

1. **Imports**:
   - **React**, **useState**, **useEffect**: Core React library and hooks for managing state and side effects within the component.
   - **Modal** from **react-modal**: A library for creating accessible modal dialogs in React applications.
   - **RelationshipModal.css**: The CSS stylesheet that styles the modal, ensuring it aligns with the application's design and accessibility standards.

2. **Accessibility Setup**:
   - `Modal.setAppElement('#root')`: Sets the root element of the app for accessibility purposes, ensuring that screen readers and other assistive technologies can appropriately handle the modal's presence.

3. **Component Definition**:
   - **Functional Component**: `RelationshipModal` is a functional component that accepts the following props:
     - `isOpen`: A boolean that determines whether the modal is open or closed.
     - `onRequestClose`: A callback function that is invoked when the modal requests to be closed (e.g., when the user clicks outside the modal or presses the escape key).
     - `columns`: An array of column names or objects representing the data columns available for defining relationships.
     - `onSaveRelationship`: A callback function that is invoked when the user saves the relationship configuration. It receives an object containing the `relationshipType` and `relationshipFeatures`.

4. **State Management**:
   - **`relationshipType`**: A state variable that holds the type of relationship being defined (e.g., "connects", "influences"). It's initialized to an empty string.
   - **`relationshipFeatures`**: A state variable that holds an array of selected features associated with the relationship. It's initialized to an empty array.

5. **Side Effects (`useEffect`)**:
   - Monitors the `isOpen` prop. When the modal is opened (`isOpen` becomes `true`), it resets the `relationshipType` and `relationshipFeatures` to their initial states, ensuring that each time the modal is opened, it starts fresh without residual data from previous interactions.

6. **Event Handlers**:
   - **`handleSubmit`**:
     - Prevents the default form submission behavior.
     - Validates that the `relationshipType` is not empty. If it is, it alerts the user to enter a relationship type.
     - Invokes the `onSaveRelationship` prop with an object containing the `relationshipType` and `relationshipFeatures`.
     - Resets the modal's state by clearing `relationshipType` and `relationshipFeatures`.
   - **`handleFeatureChange`**:
     - Handles changes to the multi-select input for relationship features.
     - Extracts the selected options and updates the `relationshipFeatures` state accordingly.

7. **Rendering**:
   - Utilizes the `Modal` component to create an accessible modal dialog with the following configurations:
     - **`isOpen`**: Controls the visibility of the modal based on the `isOpen` prop.
     - **`onRequestClose`**: Assigns the callback for closing the modal.
     - **`contentLabel`**: Provides an accessible label for the modal content.
     - **`className` and `overlayClassName`**: Assigns CSS classes for styling the modal and its overlay, respectively.
   - Inside the modal:
     - An `h2` header titled "Configure Relationship" to indicate the modal's purpose.
     - A `form` element that contains:
       - **Relationship Type Input**:
         - A labeled text input where users can specify the type of relationship.
         - Includes a placeholder example (e.g., "connects", "influences") to guide users.
       - **Features Selection**:
         - A labeled multi-select dropdown that allows users to select multiple features related to the relationship.
         - Dynamically generates `option` elements based on the `columns` prop, ensuring that users can associate relevant data columns with the relationship.
       - **Buttons**:
         - **Save**: A submit button that triggers the `handleSubmit` function to save the relationship configuration.
         - **Cancel**: A button that invokes the `onRequestClose` callback to close the modal without saving changes.

8. **Export**:
   - The component is exported as the default export, making it accessible for import and use in other parts of the application.

**Purpose in the Application**:
The `RelationshipModal` is integral for defining how different data entities interact within the graph. By allowing users to specify the type and features of relationships, it enables the application to construct more nuanced and informative graph structures. This customization ensures that the resulting visualizations accurately reflect the underlying data relationships, enhancing data analysis and insights.

*/




